#!/usr/bin/env ruby
# git-boot

# 20181106
# 0.6.5

# Usage:
# 1. With no remote specified
# git-boot
# 2. With remote specified, via ssh
# git-boot <username>:<password>@<hostname>
# 3. With remote specified, via Github API
# git-boot <username>:<password>@github.com:<username>/<project_name>

# Changes since 0.5:
# 1. Added a special section for booting to Github.
# 0/1: Updated to Github API v3.
# 2. + require 'octokit'.
# 3. - require 'HTTP'.
# 4. + require 'File/self.basename_without_extname'.
# 5. ~ create_remote_github_repo(), to work with v3 of the Github API.
# 6. + push_to_github_repo(), since it wants 'git' as the username.
# 1/2
# 7. ~ main(), /impuri/ARGV[0]/, since the former test fails to correctly detect if a remote is specified.
# 2/3
# 8. - push_to_github_repo(), since I can (as of ImpURI 0.7) assign values to component parts.
# 3/4
# 9. Updated the github usage to include path information.
# 4/5
# 10. + Gemfile

require 'File/self.basename_without_extname'
require 'fileutils'
require 'ImpURI.rbd/ImpURI'
require 'net/ssh/shell'
require 'octokit'

def path_to_repository_with_extension(impuri)
  impuri.path =~ /\.git$/ ? impuri.path : impuri.path + '.git'
end

def create_local_repo
  system "git init" unless File.exist?('.git')
  if !Dir['*'].empty?
    system "git add ."
    system "git commit -m '+ *'"
  else
    FileUtils.touch('.gitignore')
    system "git add .gitignore"
    system "git commit -m '+ .gitignore'"
  end
end

def create_remote_repo(impuri)
  Net::SSH.start(impuri.host, impuri.username, password: impuri.password) do |ssh|
    ssh.shell do |sh|
      sh.execute "mkdir #{path_to_repository_with_extension(impuri)}"
      sh.execute "cd #{path_to_repository_with_extension(impuri)}"
      sh.execute "git --bare init"
      sh.execute "exit"
    end
  end
end

def create_remote_github_repo(impuri)
  repository_name = File.basename_without_extname(impuri.path)
  octokit_client = Octokit::Client.new(login: impuri.username, password: impuri.password)
  octokit_client.create_repository(repository_name)
end

def push_to_remote_repo(impuri)
  ssh_style_uri = "#{impuri.username}@#{impuri.hostname}:#{impuri.path}"
  system "git remote add origin #{ssh_style_uri}"
  system "git push origin master"
end

def main
  impuri = ImpURI.new(ARGV[0])
  create_local_repo
  if ARGV[0]
    if impuri.hostname == 'github.com'
      create_remote_github_repo(impuri)
      impuri.username = 'git'
      push_to_remote_repo(impuri)
    else 
      create_remote_repo(impuri)
      push_to_remote_repo(impuri)
    end
  end
end

main
