#!/usr/bin/env ruby
# git-boot

# 20200320, 22
# 0.7.0

# Usage:
# 1. With no remote specified
#   $ cd <repo_name>
#   $ git boot
# 2. With remote specified, via ssh
#   $ cd <repo_name>
#   $ git boot <username>:<password>@<hostname>
# 3. With remote specified, via Github API
#   $ cd <repo_name>
#   $ git boot <username>:<password>@github.com:<username>/<repo_name>
# 4. With remote specified, via Github API, using OTP
#   $ cd <repo_name>
#   $ git boot <username>:<password>@github.com:<username>/<repo_name> --otp <otp>

# Changes since 0.6:
# -/0 Now able to handle using OAuth and OTP.
# 1. + lib/
# 2. + require 'File/self.collect'
# 3. + require 'switches.rb'
# 4. /require 'ImpURI.rbd'/require 'impuri'/ (Now using the gemified version of ImpURI.)
# 5. + words()
# 6. + random_word_for_authorization_note()
# 7. ~ create_remote_github_repo(), so as to be able to handle OAuth and OTP.
# 8. + README.md

# Note:
# 1. Presently this handles only the creation of public repos.

# Todo:
# 1. Be able to handle the creation of private repos.

lib_dir = File.expand_path(File.join(__FILE__, '..', '..', 'lib'))
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'File/self.basename_without_extname'
require 'File/self.collect'
require 'fileutils'
require 'impuri'
require 'net/ssh/shell'
require 'octokit'
require 'switches.rb'

def switches
  @switches ||= Switches.new do |s|
    s.set(:o, :otp, :one_time_password)
  end
end

def words(filename = '/usr/share/dict/words')
  @words ||= File.collect(filename){|line| line.chomp}
end

# This method enables logging in without re-using the same authorization, which would happen if git-boot were to be run twice within a given period.
def random_word_for_authorization_note
  words.sample
end

def path_to_repository_with_extension(impuri)
  impuri.path =~ /\.git$/ ? impuri.path : impuri.path + '.git'
end

def create_local_repo
  system "git init" unless File.exist?('.git')
  if !Dir['*'].empty?
    system "git add ."
    system "git commit -m '+ *'"
  else
    FileUtils.touch('.gitignore')
    system "git add .gitignore"
    system "git commit -m '+ .gitignore'"
  end
end

def create_remote_repo(impuri)
  Net::SSH.start(impuri.host, impuri.username, password: impuri.password) do |ssh|
    ssh.shell do |sh|
      sh.execute "mkdir #{path_to_repository_with_extension(impuri)}"
      sh.execute "cd #{path_to_repository_with_extension(impuri)}"
      sh.execute "git --bare init"
      sh.execute "exit"
    end
  end
end

def create_remote_github_repo(impuri, one_time_password = nil)
  repository_name = File.basename_without_extname(impuri.path)
  octokit_client = Octokit::Client.new(login: impuri.username, password: impuri.password)
  if one_time_password
    authorization = octokit_client.create_authorization(scopes: ['public_repo'], note: random_word_for_authorization_note, headers: {'X-GitHub-OTP' => one_time_password})
  else
    authorization = octokit_client.create_authorization(scopes: ['public_repo'], note: random_word_for_authorization_note)
  end
  octokit_client = Octokit::Client.new(access_token: authorization.token)
  octokit_client.create_repository(repository_name)
end

def push_to_remote_repo(impuri)
  ssh_style_uri = "#{impuri.username}@#{impuri.hostname}:#{impuri.path}"
  system "git remote add origin #{ssh_style_uri}"
  system "git push origin master"
end

def main
  one_time_password = switches.one_time_password
  impuri = ImpURI.new(ARGV[0])
  create_local_repo
  if ARGV[0]
    if impuri.hostname == 'github.com'
      create_remote_github_repo(impuri, one_time_password)
      impuri.username = 'git'
      push_to_remote_repo(impuri)
    else 
      create_remote_repo(impuri)
      push_to_remote_repo(impuri)
    end
  end
end

main
